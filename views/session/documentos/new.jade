extends ../../layout.jade

block contenido
	-if (user.permission == "Admin")
		include ../session_permission/adminActions.jade
	-else if (user.permission == "Branch")
		include ../session_permission/branchActions.jade
	-else if (user.permission == "Resource")
		include ../session_permission/resourceActions.jade
	-else
		include ../session_permission/userActions.jade

	main
		div(class="container mx-auto col-xs-10 col-sm-8 col-md-6 col-lg-4 top-space documento-new")
			h1(class="text-center") Nuevo agendamiento
			form(id="sendDoc" action="/session/documentos" method="POST")
				div(class="text-center top-space")
					span(class="step")
					span(class="step")
					span(class="step")
				div(class="tab")
					p Selección de tratamiento
					div(class="form-group")
						label(for="usr") Usuario:
						select(class="form-control" name="usr" id="usr")
							if(users.length == 1)
								option(class="text-secondary" value=users[0]._id selected)=users[0].name
							else
								option(class="text-secondary" value="undefined" disabled selected) Seleccione un usuario
								for user in users
									option(class="text-secondary" value=user._id)=user.name
					div(class="form-group mb-5" id="packContainer" style="display:none;")
						label(for="pack") Selecciona uno o varios packs:
						select(class="form-control selectpicker" name="pack" id="pack" multiple)
					div(class="selection-surface" id="selectionSurface" style="display:none;")
						input(type="hidden" id="svc" name="svc" value=1)
						p Haz click sobre una zona para agregarla. Haz click de nuevo sobre dicha zona para removerla.
						div(class="human-body" id="femaleBody" style="display:none;")
							nav(class="nav nav-pills nav-fill")
								a(class="nav-item nav-link active" id="femalePillsFront" data-toggle="tab" href="#femaleBodyFront" role="tab" aria-controls="femaleBodyFront" aria-selected="true") Frente
								a(class="nav-item nav-link" id="femalePillsBack" data-toggle="tab" href="#femaleBodyBack" role="tab" aria-controls="femaleBodyBack" aria-selected="false") Espalda
							div(class="tab-content" id="femaleTabContent")
								div(class="tab-pane fade show active" id="femaleBodyFront" role="tabpanel" aria-labelledby="femalePillsFront")
									svg(class="svg-body" viewBox="0 0 30 60" id="svgFrontM")
										image(href="/public/femalebody_front.jpg" x="0" y="5" height="50")

								div(class="tab-pane fade" id="femaleBodyBack" role="tabpanel" aria-labelledby="femalePillsBack")
									svg(class="svg-body" viewBox="0 0 30 60" id="svgBackM")
										image(href="/public/femalebody_back.jpg" x="0" y="5" height="50")

						div(class="human-body" id="maleBody" style="display:none;")
							nav(class="nav nav-pills nav-fill")
								a(class="nav-item nav-link active" id="malePillsFront" data-toggle="tab" href="#maleBodyFront" role="tab" aria-controls="femaleBodyFront" aria-selected="true") Frente
								a(class="nav-item nav-link" id="malePillsBack" data-toggle="tab" href="#maleBodyBack" role="tab" aria-controls="maleBodyBack" aria-selected="false") Espalda
							div(class="tab-content" id="maleTabContent")
								div(class="tab-pane fade show active" id="maleBodyFront" role="tabpanel" aria-labelledby="malePillsFront")
									svg(class="svg-body" viewBox="0 0 30 60" id="svgFrontH")
										image(href="/public/malebody_front.jpg" x="0" y="5" height="50")

								div(class="tab-pane fade" id="maleBodyBack" role="tabpanel" aria-labelledby="malePillsBack")
									svg(class="svg-body" viewBox="0 0 30 60" id="svgBackH")
										image(href="/public/malebody_back.jpg" x="0" y="5" height="50")

						div(class="selected-zones" id="selectedZones" style="display:none;")
							h5 Zonas seleccionadas #[span(id="selectedZonesCount" class="badge badge-primary") ]
							p(id="noSelectedZones") Aquí se van a mostrar las zonas seleccionadas
							div(class="packed-container" id="packedContainer")
								h6 Zonas del pack
								div(class="packed-zones" id="packedZones")
							div(class="non-packed-container" id="nonPackedContainer")
								h6 Zonas fuera de pack
								div(class="non-packed-zones" id="nonPackedZones")
				div(class="tab")
					p Selección de sucursal
					div(class="form-group")
						select(class="form-control" name="brch" id="brch")
							option(class="text-secondary" value="undefined" disabled selected) Elija una sucursal
							for branch in branches
								option(class="text-secondary" value=branch._id)=branch.name
					div(id="map" class="map")
				div(class="tab")
					p Agendamiento de hora
					div(class="form-group")
						select(class="form-control" name="ress" id="ress")
					div(id="calendar" class="disabled")
						input(type="hidden" id="dateSelect" name="dateSelect" value="")
						input(type="hidden" id="selectedTreatment" name="selectedTreatment" value="")
				div(class="form-group btn-group float-right top-space" role="group")
					button(type="button" class="btn btn-outline-danger btn-lg" id="prevBtn" onclick="nextPrev(-1)" data-toggle="tooltip" data-placement="top" title="Atrás")
						i(class="fa fa-caret-square-o-left")
					button(type="button" class="btn btn-outline-success btn-lg" id="nextBtn" onclick="nextPrev(1)" data-toggle="tooltip" data-placement="top" title="Siguiente")
						i(class="fa fa-check-square-o")

				div(id="toggableCard" class="toggable-card card width-300")
					div(class="card-header")
					div(class="card-body")

				script(src="/public/js/renderFuncs.js")

				script.
					$(document).ready(function(){
						let services = _.where(!{JSON.stringify(services)});
						services.forEach(function(element){
							$("#svg"+element.side+element.gender)[0].innerHTML += '<g title='+ element.name +' data-size='+ element.category +' data-gender="male" data-id='+ element._id +'>'+ element.shapes.toString() +'</g>';
						});											
												
						/*
						   Paso 1: Selección de servicios
						   ------------------------------
						*/

						let form = {
							user: $("#usr"),
							pack: {
								container: $("#packContainer"),
								selectElement: $("#pack")
							}
						}

						/* Superficie de selección */
						let selectionSurface = {
							element: $("#selectionSurface"),
							femaleBody: $("#femaleBody"),
							maleBody: $("#maleBody"),
							zonesElement: $("#selectedZones"),
							badge: $("#selectedZonesCount"),
							noSelectedZones: $("#noSelectedZones"),
							selectedZones: $("#selectedZones"),
							packedZones: {
								container: $("#packedContainer"),
								zones: $("#packedZones")
							},
							nonPackedZones: {
								container: $("#nonPackedContainer"),
								zones: $("#nonPackedZones")
							}
						};

						let card = {
							element: $("#toggableCard"),
							header: $("#toggableCard .card-header"),
							title: $("#toggableCard .card-title"),
							body: $("#toggableCard .card-body")
						};

						/* Elementos seleccionables */
						let userObj;
						let pack;

						/* Datos desde back-end */
						let packs = !{JSON.stringify(packs)};
						let users = !{JSON.stringify(users)};

						/* Arreglos de tracking */
						let packTrack = [];
						let nonPackTrack = [];

						let filteredPacks = [];

						let selectedPacks;

						if (users.length > 1) {
							/* Configuración inicial para administrador */

							/* El administrador puede cambiar el usuario */
							form.user.on("change", function(event){

								userObj = _.where(!{JSON.stringify(users)}, {_id: this.value})[0];

								form.pack.selectElement.html("");

								/* Al seleccionar el usuario, se habilita
								   el elemento select */
								form.pack.container.css({"display":"block"});

								/* El elemento select se llena con todos
								   los packs disponibles para el usuario seleccionado */
								let openingOption = document.createElement("option");
								$(openingOption).addClass("text-secondary")
												.attr("value", "undefined")
												.prop("disabled", true)
												.html("Elija un pack");

								form.pack.selectElement.append($(openingOption));

								filteredPacksByUser = packs.filter(function(element){
									return element.usuario == userObj._id;
								});

								filteredPacksByUser.forEach(function(element){
									let option = document.createElement("option");
									$(option).addClass("text-secondary")
											 .attr("value", element._id)
											 .html(element.packType.title);
									form.pack.selectElement.append(option);
								});

								form.pack.selectElement.selectpicker("refresh");

								/* Se muestra el cuerpo de selección
								   perteneciente al género del usuario */
								if (userObj.gender == "M") {
									selectionSurface.femaleBody.css({"display":"block"});
									selectionSurface.maleBody.css({"display":"none"});
								} else if (userObj.gender == "H") {
									selectionSurface.maleBody.css({"display":"block"});
									selectionSurface.femaleBody.css({"display":"none"});
								}

								selectionSurface.badge.html("0");
								selectionSurface.element.css({"display":"block"});

								selectionSurface.packedZones.container.css({"display":"none"});
								selectionSurface.nonPackedZones.container.css({"display":"none"});

								selectionSurface.selectedZones.css({"display":"block"});
							});
						} else {
							/* Configuración inicial para usuario */

							userObj = !{JSON.stringify(user)};

							form.pack.selectElement.html("");

							/* Al haber solo un usuario, el elemento select
							   se llena con los packs disponibles para ese usuario */
							form.pack.container.css({"display":"block"});

							let openingOption = document.createElement("option");
							$(openingOption).addClass("text-secondary")
											.attr("value", "undefined")
											.prop("disabled", true)
											.html("Elija un pack");

							form.pack.selectElement.append($(openingOption));

							filteredPacksByUser = packs.filter(function(element){
								return element.usuario == userObj._id;
							});

							filteredPacksByUser.forEach(function(element){
								let option = document.createElement("option");
								$(option).addClass("text-secondary")
										 .attr("value", element._id)
										 .html(element.packType.title);
								form.pack.selectElement.append(option);
							});

							form.pack.selectElement.selectpicker("refresh");

							/* Se muestra el cuerpo de selección
							   perteneciente al género del usuario */

							if (userObj.gender == "M") {
								selectionSurface.femaleBody.css({"display":"block"});
							} else if (userObj.gender == "H") {
								selectionSurface.maleBody.css({"display":"block"});
							}

							selectionSurface.badge.html("0");
							selectionSurface.element.css({"display":"block"});

							selectionSurface.packedZones.container.css({"display":"none"});
							selectionSurface.nonPackedZones.container.css({"display":"none"});

							selectionSurface.selectedZones.css({"display":"block"});
						}

						form.pack.selectElement.on("change", function(event){
							/* El arreglo de tracking con las zonas paquetizadas se forma
							   cuando se selecciona el elemento select de selección del pack */
							selectionSurface.packedZones.container.css({"display":"none"});
							selectionSurface.packedZones.zones.html("");
							selectedPacks = [];

							let packs = !{JSON.stringify(packs)};

							pack = _.where(!{JSON.stringify(packs)}, {_id: this.value})[0];

							/* Se arma un arreglo de arreglos, con cada arreglo interno
							   albergando los tamaños de cada paquete */
							$(this).find("option").each(function(){
								if($(this).is(":selected")) {
									let value = $(this).attr("value");
									let index = getIndexOfPacksByID(value, packs);
									selectedPacks.push(packs[index].packType.zoneTypes.split("+"));
								}
							});

							/* La función que determina las zonas paquetizadas
							   solo se ejecuta cuando se ha establecido el usuario */
							if (userObj != (null || undefined)) {
								initZones();
							} else {
								return;
							}
						});

						function initZones(){
							/* Las zonas paquetizadas previamente seleccionadas
							   se mueven a las zonas no paquetizadas */
							convertPackedZonesToNonPacked();

							/* Se establecen en su arreglo de tracking las zonas del cuerpo paquetizadas */
							packTrack = [];

							selectedPacks.forEach(function(packZones){
								packZones.forEach(function(zone){
									let alertContainer = document.createElement("div");
									$(alertContainer).addClass("alert-container alert-container-header")

									let sizeHeader = document.createElement("div");
									$(sizeHeader).addClass("size-header")
											 	 .html(zone);

									let alertHolder = document.createElement("div")
									$(alertHolder).addClass("alert-holder");

									$(sizeHeader).appendTo($(alertContainer));
									$(alertHolder).appendTo($(alertContainer));

									$(alertContainer).appendTo(selectionSurface.packedZones.zones);

									let trackObj = {};
									trackObj.zoneName = null;
									trackObj.gender = null;
									trackObj.size = zone;
									trackObj.container = $(alertContainer);
									trackObj.holder = $(alertHolder);
									trackObj.alert = null;
									trackObj.shape = null;

									packTrack.push(trackObj);
								});
							});

							/* Las zonas no paquetizadas que forman parte de los packs
							   seleccionados, se convierten a zonas paquetizadas */
							convertNonPackedZonesToPacked();

							selectionSurface.packedZones.container.css({"display":"block"});

							updateSelectedZones();
							colorizeSelectedZones();
						}

						function convertPackedZonesToNonPacked() {
							/* Si hay zonas paquetizadas, se deben agregar a la zona de no paquetizado antes
							   de vaciar el arreglo de zonas paquetizadas */
							if (packTrack.length != 0) {
								packTrack.forEach(function(element){
									if (element.shape != null) {
										addShapeToNonPackTrack(element.shape);
									}
								});
							}
						}

						function convertNonPackedZonesToPacked() {
							/* Si hay zonas no paquetizadas, se procede a llenar el arreglo de zonas paquetizadas
							   con las zonas no-paquetizadas agregadas anteriormente.
							   Al final del proceso, el arreglo de zonas paquetizadas debe contener todas las zonas no-paquetizadas
							   que alcanzen. Las demás deben seguir en el arreglo de zonas no-paquetizadas */
							if (nonPackTrack.length != 0) {
								packTrack.forEach(function(elementOfPackTrack){
									let indexOfElementUntracked = nonPackTrack.findIndex(function(elementOfNonPackTrack){
										return elementOfPackTrack.size == elementOfNonPackTrack.size;
									});

									if (indexOfElementUntracked != -1) {
										let shape = nonPackTrack[indexOfElementUntracked].shape;
										addShapeToPackTrack(shape);
										$(nonPackTrack[indexOfElementUntracked].alert).alert("close");
									}
								});
							}
						}

						/* Eventos de mouse sobre las zonas del cuerpo */

						$("g").on("mouseenter", function(event){
							/* Al poner el cursor sobre la zona */
							let shape = $(event.currentTarget);

							shape.css({"opacity":"0.3"});

							openCard(event, shape);
						});

						$("g").on("mousemove", function(event){
							/* Al mover el cursor estando en la zona */
							let shape = $(event.currentTarget);

							editCard(event,shape);
						});

						$("g").on("click", function(event){
							/* Al hacer click sobre la zona */
							let shape = $(event.currentTarget);
							let size = $(shape).attr("data-size");

							if (!isShapeTracked(shape, packTrack) && !isShapeTracked(shape, nonPackTrack)) {
								/* ¿La zona está seleccionada, como parte o fuera de un pack? */
								if (isSizeTracked(size, packTrack)) {
									/* ¿El tamaño de la zona está en el arreglo de tracking de los packs establecidos? */
									if (isShapeTracked(shape, packTrack)) {
										/* Si la zona ya está seleccionada en los packs establecidos, se agrega fuera del pack */
										addShapeToNonPackTrack(shape);
										shape.css({"opacity":"0.6"});
									} else if (isSizeAvailable(size, packTrack)) {
										/* Si la zona está disponible para ser seleccionada, se agrega al pack */
										addShapeToPackTrack(shape);
										shape.css({"opacity":"0.6"});
									} else {
										/* Si la zona no está disponible para ser seleccionada, se agrega fuera del pack */
										addShapeToNonPackTrack(shape);
										shape.css({"opacity":"0.6"});
									}
								} else  {
									/* Si el tamaño de la zona no está en el arreglo de tracking de los packs,
									   se agrega fuera de pack */
									addShapeToNonPackTrack(shape);
									shape.css({"opacity":"0.6"});
								}
							} else if (isShapeTracked(shape, packTrack)){
								/* Deseleccionar una zona dentro de los packs establecidos */
								let index = getIndexTrackOfShape(shape, packTrack);
								$(packTrack[index].alert).alert("close");
								shape.css({"opacity":"0.3"});
							} else if (isShapeTracked(shape, nonPackTrack)) {
								/* Deseleccionar una zona fuera de los packs establecidos */
								let index = getIndexTrackOfShape(shape, nonPackTrack);
								$(nonPackTrack[index].alert).alert("close");
								shape.css({"opacity":"0.3"});
							}

							editCard(event,shape);
						});

						$("g").on("mouseleave", function(event){
							/* Al sacar el cursor de la zona */
							let shape = $(event.currentTarget);

							if (isShapeTracked(shape, packTrack)) {
								shape.css({"opacity":"0.6"});
							} else if (isShapeTracked(shape, nonPackTrack)) {
								shape.css({"opacity":"0.6"});
							} else {
								shape.css({"opacity":"0"});
							}

							hideCard();
						});

						/* Edición de objetos dentro y fuera del pack */

						function addShapeToPackTrack(shape) {
							/* Se añade la zona al arreglo de tracking de zonas paquetizadas */
							let zoneName = $(shape).attr("title");
							let gender = $(shape).attr("data-gender");
							let size = $(shape).attr("data-size");
							let id = $(shape).attr("data-id");

							let index = getAvailableIndexTrackForSize(size, packTrack);

							packTrack[index].zoneName = zoneName;
							packTrack[index].gender = gender;
							packTrack[index].size = size;
							packTrack[index].id = id;

							packTrack[index].alert = createPackedAlert(shape, zoneName);
							packTrack[index].shape = $(shape);

							updateSelectedZones();

							$(packTrack[index].alert).appendTo($(packTrack[index].holder));
						}

						function deleteShapePacked(index, event) {
							/* Se borra la zona del arreglo de tracking de zonas paquetizadas */
							let shape = packTrack[index].shape;

							packTrack[index].zoneName = null;
							packTrack[index].gender = null;
							packTrack[index].alert = null;
							packTrack[index].shape = null;

							$(shape).css({"opacity":"0"});

							updateSelectedZones();
						}

						function addShapeToNonPackTrack(shape) {
							/* Se añade la zona al arreglo de tracking de zonas no paquetizadas */
							let trackObj = new Object();

							let zoneName = $(shape).attr("title");
							let gender = $(shape).attr("data-gender");
							let size = $(shape).attr("data-size");
							let id = $(shape).attr("data-id");

							let alertContainer = document.createElement("div");
							$(alertContainer).addClass("alert-container");

							let alert = createNonPackedAlert(shape, zoneName);

							trackObj.zoneName = zoneName;
							trackObj.gender = gender;
							trackObj.size = size;
							trackObj.id = id;
							trackObj.container = $(alertContainer);
							trackObj.alert = $(alert);
							trackObj.shape = $(shape);

							nonPackTrack.push(trackObj);
							$(alert).appendTo($(alertContainer));
							$(alertContainer).appendTo(selectionSurface.nonPackedZones.zones);

							updateSelectedZones();

							if (nonPackTrack.length > 0) {
								showNonPackContainer();
							}
						}

						function deleteShapeNonPacked(index, event) {
							/* Se borra la zona del arreglo de tracking de zonas no paquetizadas */
							let shape = nonPackTrack[index].shape;
							$(nonPackTrack[index].container).remove();
							nonPackTrack = nonPackTrack.slice(0, index).concat(nonPackTrack.slice(index + 1));
							$(shape).css({"opacity":"0"});
							updateSelectedZones();
						}

						/* Alertas */

						function createPackedAlert(shape, zoneName) {
							/* Alerta para zona paquetizada */
							let myShape = shape;
							let alert = document.createElement("div");
							$(alert).addClass("alert bg-dark text-white alert-dismissible fade show")
									.html(zoneName);

							let closeButton = document.createElement("button");
							$(closeButton).addClass("close text-white")
										  .attr("data-dismiss", "alert")
										  .attr("aria-label", "close")
										  .html("&times");

							$(alert).on("close.bs.alert", function(event){
								let index = getIndexTrackOfShape(myShape, packTrack);
								deleteShapePacked(index, event);
							});

							$(closeButton).appendTo($(alert));

							return alert;
						}

						function createNonPackedAlert(shape, zoneName) {
							/* Alerta para zona no paquetizada */
							let myShape = shape;
							let alert = document.createElement("div");
							let size = $(shape).attr("data-size");

							let badge = document.createElement("span");
							$(badge).addClass("badge badge-primary")
									.append(size);

							$(alert).addClass("alert bg-dark text-white alert-dismissible fade show")
									.append(zoneName)
									.append(badge);

							let closeButton = document.createElement("button");
							$(closeButton).addClass("close text-white")
										  .attr("data-dismiss", "alert")
										  .attr("aria-label", "close")
										  .html("&times");

							$(alert).on("close.bs.alert", function(event){
								let index = getIndexTrackOfShape(myShape, nonPackTrack);
								deleteShapeNonPacked(index, event);
							});

							$(closeButton).appendTo($(alert));

							return alert;
						}

						/* Tarjeta */

						function openCard(event, shape) {
							/* Se muestra la tarjeta */
							let posX = event.clientX;
							let posY = event.clientY;

							card.element.css({
								"left":(posX + 20) + "px",
								"top":(posY + 20) + "px",
								"display":"block"
							});
						}

						function editCard(event, shape) {
							/* Se edita la tarjeta */
							let posX = event.clientX;
							let posY = event.clientY;

							let size = $(shape).attr("data-size");

							card.element.removeClass("bg-secondary bg-success bg-warning text-white text-body");
							card.header.html("");
							card.body.html("");

							/* Título */
							card.header.append(setTitle(shape));

							/* Contenido y colores */
							card.element.addClass("text-white");

							if (isShapeTracked(shape, packTrack) || isShapeTracked(shape, nonPackTrack)) {
								card.element.addClass("bg-success");
								card.body.append(addedParagraph());
								card.body.append(removeParagraph());
							} else {
								card.element.addClass("bg-secondary");
								card.body.append(selectToAddParagraph());
							}

							if (!isShapeTracked(shape, packTrack) && !isShapeTracked(shape, nonPackTrack)) {
								if(isSizeTracked(size, packTrack)) {
									if (isShapeTracked(shape, packTrack)) {
										card.element.addClass("bg-secondary");
										card.body.append(warningParagraph());
									} else if (!isSizeAvailable(size, packTrack)) {
										card.element.addClass("bg-secondary");
										card.body.append(warningParagraph());
									}
								} else {
									card.element.addClass("bg-secondary");
									card.body.append(warningParagraph());
								}
							}

							/* Posición de la tarjeta */
							card.element.css({
								"left":(posX + 20) + "px",
								"top":(posY + 20) + "px",
								"display":"block"
							});
						}

						function hideCard() {
							/* Se esconde la tarjeta */
							card.element.css({
								"display":"none"
							});
						}

						function setTitle(shape) {
							/* Se setea el título de la tarjeta */
							let h5 = document.createElement("h5");
							$(h5).addClass("font-weight-bold");

							let title = $(shape).attr("title");
							let size = $(shape).attr("data-size");

							let badge = document.createElement("span");
							$(badge).addClass("badge").addClass("badge-primary").append(size);

							$(h5).append(title).append(badge);
							return $(h5);
						}

						function selectToAddParagraph() {
							/* Se añade una párrafo de "Seleccione para agregar" */
							let p = document.createElement("p");
							$(p).addClass("card-text");

							let i = document.createElement("i");
							$(i).addClass("fa").addClass("fa-plus").addClass("fa-fw");

							$(p).append($(i)).append("Click para agregar esta zona");
							return $(p);
						}

						function addedParagraph() {
							/* Se añade un párrafo de "agregada" */
							let p = document.createElement("p");
							$(p).addClass("card-text");

							let i = document.createElement("i");
							$(i).addClass("fa").addClass("fa-check").addClass("fa-fw");

							$(p).append($(i)).append("Zona agregada");
							return $(p);
						}

						function removeParagraph() {
							/* Se añade un párrafo de "Haz click para quitar esta zona" */
							let p = document.createElement("p");
							$(p).addClass("card-text");

							let small = document.createElement("small");

							let i = document.createElement("i");

							$(small).append("Haz click para quitar esta zona");
							$(p).append($(small));
							return $(p);
						}

						function warningParagraph() {
							/* Se añade un párrafo de advertencia al momento de hacer la selección */
							let p = document.createElement("p");
							$(p).addClass("card-text text-warning");

							let small = document.createElement("small");

							let i = document.createElement("i");
							$(i).addClass("fa").addClass("fa-exclamation-triangle").addClass("fa-fw");

							$(small).append($(i)).append("Zona no pertenece a los packs seleccionados. Costo adicional.");
							$(p).append($(small));
							return $(p);
						}

						/* Funciones auxiliares */

						function getIndexOfPacksByID(id, packs) {
							/* Se obtiene la ID del pack con una ID dada como parámetro */
							return packs.findIndex(function(element){
								return id == element._id;
							});
						}

						function getIndexTrackOfShape(shape, track){
							/* Se obtiene el índice del arreglo de tracking para una forma dada como parámetro*/
							return track.findIndex(function(element){
								return $(shape).is($(element.shape));
							});
						}

						function getIndexTrackOfAlert(alert, track){
							/* Se obtiene el índice del arreglo de tracking para un elemento de alerta dado como parámetro */
							return track.findIndex(function(element){
								return $(alert).is($(element.alert));
							});
						}

						function isSizeTracked(size, track) {
							/* ¿Es el tamaño parte de un arreglo de tracking? */
							let index = track.findIndex(function(element){
								return size == element.size;
							});

							return (index != -1);
						}

						function isShapeTracked(shape, track) {
							/* ¿La forma ha sido agregada previamente a un arreglo de tracking? */
							let index = track.findIndex(function(element){
								return $(shape).is($(element.shape));
							});
							return (index != -1);
						}

						function isSizeAvailable(size, track) {
							/* ¿El tamaño actual tiene disponibilidad en el arreglo de tracking? */
							let index = track.findIndex(function(element){
								return ((size == element.size) && (element.shape == null));
							});

							return (index != -1);
						}

						function getAvailableIndexTrackForSize(size, track) {
							/* Se obtiene el primer índice de elemento en el pack
							   que coincida con el tamaño y no tenga una forma asociada */
							return track.findIndex(function(element){
								return ((size == element.size) && (element.shape == null));
							});
						}

						/* Interfaz gráfica */

						function showNonPackContainer() {
							/* Mostrar el contenedor de las zonas
							   no-pertenecientes a un pack */
							selectionSurface.nonPackedZones.container.css({
								"display":"block"
							});
						}

						/*
						function isZoneAndSizeOnTrack = function(zone, size, track) {

						}
						*/

						function hideNonPackContainer() {
							/* Esconder el contenedor de las zonas no-pertenecientes a un pack */
							selectionSurface.nonPackedZones.container.css({
								"display":"none"
							});
						}

						function updateSelectedZones(){
							/* Actualización de la información en la interfaz gráfica referente */
							let totalZones = getTotalZones();

							selectionSurface.badge.html(totalZones);

							selectionSurface.packedZones.container.css({
								"display": (packTrack.length > 0 ? "block" : "none")
							});

							selectionSurface.nonPackedZones.container.css({
								"display": (nonPackTrack.length > 0 ? "block" : "none")
							});

							selectionSurface.noSelectedZones.css({
								"display": ((totalZones == 0 && packTrack.length == 0) ? "block" : "none")
							});
						}

						/* General */

						function getSelectedPackedZones() {
							/* Se obtiene la cuenta de zonas del cuerpo seleccionadas como parte de los packs seleccionados */
							let count = 0;

							packTrack.forEach(function(element){
								count += (element.shape != null ? 1 : 0);
							});

							return count;
						}

						function getTotalZones() {
							/* Se obtiene la cuenta de zonas seleccionadas (paquetizadas + no paquetizadas) */
							return getSelectedPackedZones() + nonPackTrack.length;
						}

						function setDefaultState(){
							/* Reseteo de todos los componentes al estado por defecto */

							/* Reseteo de los arreglos de tracking */
							packTrack = [];
							nonPackTrack = [];

							/* Reseteo de las formas */
							$("g").css({"opacity":"0"});

							/* Reseteo de la selección */
							selectionSurface.packedZones.zones.html("");
							selectionSurface.nonPackedZones.zones.html("");
						}

						function colorizeSelectedZones(){
							/* Se muestran como marcadas todas las zonas del cuerpo seleccionadas */

							/* Para cada zona del cuerpo paquetizada */
							packTrack.forEach(function(element){
								if (element.shape != null) {
									element.shape.css({
										"opacity":"0.6"
									});
								}
							});

							/* Para cada zona del cuerpo no paquetizada */
							nonPackTrack.forEach(function(element){
								if (element.shape != null) {
									element.shape.css({
										"opacity":"0.6"
									});
								}
							});
						};


						/* En desarrollo */

						var duration = 0;
						var sessLenght = moment.duration(duration, "minutes");
						var workHours = [
							{
								dow: [1, 2 ,3 ,4 ,5],
								start: "07:00",
								end: "20:00"
							},
							{
								dow: [6],
								start: "07:00",
								end: "14:00"
							}
						];

						$("#usr").change(function(e){
							if (e.originalEvent) {
								setDefaultState();
							}
							else {

							}
						});

						$("#pack").change(function(e){
							if (e.originalEvent) {
							}
							else {
								let selectedTreatment = packTrack.filter(pt => pt.id != undefined).concat(nonPackTrack).map(a => a.id);
								
								duration = _.filter(!{JSON.stringify(services)}, function(elem){
									return (selectedTreatment).includes(elem._id);
								}).map(b => b.duration).reduce((c, d) => (c + d));
								sessLenght = moment.duration(duration, "minutes");
								document.getElementById("selectedTreatment").value = selectedTreatment;
								alert(selectedTreatment);
								$('#calendar').fullCalendar('option', {
									snapDuration: sessLenght
								});
							}
						});

						$("#brch").change(function(e){
							if (e.originalEvent) {
									initMap(_.where(!{JSON.stringify(branches)}, {_id: this.value}));
								}
							else {
								var option = $('<option class="text-secondary" value="undefined" disabled selected>Elija un especialista</option>');
								$("#ress")
									.empty()
									.append(option);
								brchResrcs = _.where(!{JSON.stringify(resources)}, {parentBranch: this.value});
								brchResrcs.forEach(function(resource){
									$("#ress").append(new Option(resource.name, resource._id));
								});
								$('#calendar').fullCalendar("removeEvents");
								$('#calendar').fullCalendar("option", {	selectable: false });
								$('#calendar').addClass("disabled");
							}
						});

						$("#ress").change(function(){
							workHours = _.where(!{JSON.stringify(resources)}, {_id: $("#ress").val()})[0].workHours;
							$('#calendar').removeClass("disabled");
							$('#calendar').fullCalendar("option", {
								selectable: true,
								businessHours: workHours
							});
							$('#calendar').fullCalendar("removeEvents");
							$('#calendar').fullCalendar("refetchEvents");
						});

						$("#calendar").fullCalendar({
							header: {
								left: 'title',
								right: 'prev,next,today'
							},
							titleFormat: 'MMM YYYY',
							buttonText: {
								today:    'hoy'
							},
							themeSystem: 'bootstrap4',
							defaultView: 'agendaWeek',
							columnHeaderText: function(mom){
								switch (mom.weekday()){
									case 0: return 'Dom\n' + mom.date() + '/' + (mom.month()+1); break;
									case 1: return 'Lun\n' + mom.date() + '/' + (mom.month()+1); break;
									case 2: return 'Mar\n' + mom.date() + '/' + (mom.month()+1); break;
									case 3: return 'Mie\n' + mom.date() + '/' + (mom.month()+1); break;
									case 4: return 'Jue\n' + mom.date() + '/' + (mom.month()+1); break;
									case 5: return 'Vie\n' + mom.date() + '/' + (mom.month()+1); break;
									case 6: return 'Sab\n' + mom.date() + '/' + (mom.month()+1); break;
									default: return;
								}
							},
							allDaySlot: false,
							slotDuration: "00:15:00",
							slotLabelInterval: "01:00",
							slotEventOverlap: false,
							minTime: "07:00:00",
							maxTime: "20:00:00",
							businessHours: workHours,
							//Para seleccionar fecha y hora
							selectable: false,
							selectHelper: true,
							selectOverlap: false,
							selectConstraint: 'businessHours',
							snapDuration: sessLenght,
							selectAllow: function(selectInfo){
								if (selectInfo.end.diff(selectInfo.start) !== sessLenght._milliseconds || selectInfo.start < Date.now())
									return false;
								return true;
							},
							select: function(start, end, jsEvent, view){
								var appointment = {
									start: moment.utc(start),
									end: moment.utc(end)
								};
								document.getElementById("dateSelect").value = JSON.stringify(appointment);
							},
							unselectAuto: false,
							unselect: function(jsEvent, view){
								document.getElementById("dateSelect").value = "";
							},
							//Para eventos existentes
							editable: false,
							events: {
								url: 'http://localhost:3000/session/documentos/events',
								type: 'GET',
								error: function() {
									console.log('there was an error while fetching events!');
								},
								data : function() {
									return { resourceId : $("#ress").val() }
								},
								color: 'lightGray',   // a non-ajax option
								textColor: 'gray' // a non-ajax option
							},
							eventOverlap: false
						});
					});

				script.
					function initMap(valor){
						var index = 0;
						if(valor){
							var name = valor[0].name;
							switch(name){
								case "Vitacura":
									index = 1;
									break;
								case "Lo Barnechea":
									index = 2;
									break;
								case "Las Condes":
									index = 3;
									break;
							}


							var test = [
								{ lat: -33.4378, lng: -70.6505 },
								{ lat: -33.381813, lng: -70.580371 },
								{ lat: -33.361942, lng: -70.51506 },
								{ lat: -33.396684, lng: -70.559062 }
							];

							var map = new google.maps.Map(document.getElementById("map"), {
								center: test[index],
								zoom: 15
							});

							var marker = new google.maps.Marker({
								position: test[index],
								map: map
							});
						}
					}

				script(src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCMXiJ_cvAbyP1zQ9naANFr1hw1s7fruto&callback=initMap", async, defer)
